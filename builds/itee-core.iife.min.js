this.Itee=this.Itee||{},this.Itee.Core=function(t,e,s){"use strict";var o,r=new Uint8Array(16);function n(){if(!o&&!(o="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return o(r)}var i=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function a(t){return"string"==typeof t&&i.test(t)}for(var u=[],l=0;l<256;++l)u.push((l+256).toString(16).substr(1));function h(t,e,s){var o=(t=t||{}).random||(t.rng||n)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){s=s||0;for(var r=0;r<16;++r)e[s+r]=o[r];return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,s=(u[t[e+0]]+u[t[e+1]]+u[t[e+2]]+u[t[e+3]]+"-"+u[t[e+4]]+u[t[e+5]]+"-"+u[t[e+6]]+u[t[e+7]]+"-"+u[t[e+8]]+u[t[e+9]]+"-"+u[t[e+10]]+u[t[e+11]]+u[t[e+12]]+u[t[e+13]]+u[t[e+14]]+u[t[e+15]]).toLowerCase();if(!a(s))throw TypeError("Stringified UUID is invalid");return s}(o)}const c=s.toEnum({Console:1,Html:2,Toast:4,File:8,Database:16,All:255}),p=s.toEnum({Message:0,Progress:1,Time:2}),d=s.toEnum({None:0,Debug:1,Info:2,Warning:4,Error:8,All:255});class g{static _levelToString(t){let e="";switch(t){case d.Info:e="info";break;case d.Warning:e="warning";break;case d.Error:e="error";break;default:e="unknownLogLevel"}return e}constructor(t={}){const e={outputLevel:d.Error,outputs:c.Console,...t};this.isLogger=!0,this.outputLevel=e.outputLevel,this.outputs=e.outputs,this._logsArray=[],this._timers={},this._counterTrace=0}get outputLevel(){return this._outputLevel}set outputLevel(t){const s="Expect a value from LogLevel enum.";if(e.isNull(t))throw new Error(`OutputLevel cannot be null ! ${s}`);if(e.isUndefined(t))throw new Error(`OutputLevel cannot be undefined ! ${s}`);this._outputLevel=t}get outputs(){return this._outputs}set outputs(t){const s="Expect a value from LogOutput enum.";if(e.isNull(t))throw new Error(`Output cannot be null ! ${s}`);if(e.isUndefined(t))throw new Error(`Output cannot be undefined ! ${s}`);this._outputs=t}_formatTrace(t,s){const o=`${g._levelToString(t)}_${this._counterTrace}`;if(e.isString(s))this._logsArray[o]=s;else if(e.isObject(s))this._logsArray[o]=g._formatObjectError(s);else if(e.isArrayOfString(s))this._logsArray[o]=s.toString();else if(e.isArrayOfObject(s)){this._logsArray[o]="";for(let e=0,o=s.length;e<o;e++)this._formatTrace(t,s[e])}else this._logsArray[o]=s?s.toString():"Empty log data !";return this._counterTrace++,this._logsArray[o]}dispatch(t){const e=t.type;switch(e){case p.Message:this._dispatchMessage(t);break;case p.Progress:this._dispatchProgress(t);break;case p.Time:this._dispatchTime(t);break;default:throw new RangeError(`Invalid switch parameter: ${e}`)}}_dispatchMessage(t){const e=t.level,s=t.message;switch(e){case d.Error:this.outputLevel&d.Error&&this._dispatchErrorMessage(s);break;case d.Warning:this.outputLevel&d.Warning&&this._dispatchWarningMessage(s);break;case d.Info:this.outputLevel&d.Info&&this._dispatchInfoMessage(s);break;case d.Debug:this.outputLevel&d.Debug&&this._dispatchDebugMessage(s);break;default:throw new RangeError(`Invalid switch parameter: ${e}`)}}_dispatchErrorMessage(t){if(this.outputs&c.Console&&console.error(t),this.outputs&c.Html){const e=document.createElement("span");e.classList.add("log-error"),e.innerText=t,document.body.appendChild(e)}this.outputs,c.Toast,this.outputs,c.File,this.outputs,c.Database}_dispatchWarningMessage(t){if(this.outputs&c.Console&&console.warn(t),this.outputs&c.Html){const e=document.createElement("span");e.classList.add("log-warning"),e.innerText=t,document.body.appendChild(e)}this.outputs,c.Toast,this.outputs,c.File,this.outputs,c.Database}_dispatchInfoMessage(t){if(this.outputs&c.Console&&console.log(t),this.outputs&c.Html){const e=document.createElement("span");e.classList.add("log-info"),e.innerText=t,document.body.appendChild(e)}this.outputs,c.Toast,this.outputs,c.File,this.outputs,c.Database}_dispatchDebugMessage(t){if(this.outputs&c.Console&&console.log(t),this.outputs&c.Html){const e=document.createElement("span");e.classList.add("log-info"),e.innerText=t,document.body.appendChild(e)}this.outputs,c.Toast,this.outputs,c.File,this.outputs,c.Database}_dispatchProgress(t){const e=t.level;let s=t.message;switch(e){case d.Info:this.outputLevel&d.Info&&this._dispatchInfoProgress(s);break;case d.Debug:this.outputLevel&d.Debug&&this._dispatchDebugProgress(s);break;default:throw new RangeError(`Invalid progress level parameter: ${e}`)}}_dispatchInfoProgress(t){if(this.outputs&c.Console&&console.log(t),this.outputs&c.Html){const e=document.createElement("span");e.classList.add("log-info"),e.innerText=t,document.body.appendChild(e)}this.outputs,c.Toast,this.outputs,c.File,this.outputs,c.Database}_dispatchDebugProgress(t){if(this.outputs&c.Console&&console.log(t),this.outputs&c.Html){const e=document.createElement("span");e.classList.add("log-info"),e.innerText=t,document.body.appendChild(e)}this.outputs,c.Toast,this.outputs,c.File,this.outputs,c.Database}_dispatchTime(t){console.log(t.message)}debug(t){this.dispatch({type:p.Message,level:d.Debug,message:t})}log(t){this.dispatch({type:p.Message,level:d.Info,message:t})}warn(t){this.dispatch({type:p.Message,level:d.Warning,message:t})}error(t){this.dispatch({type:p.Message,level:d.Error,message:t})}progress(t){if(t.preventDefault(),t.cancelable&&t.stopImmediatePropagation(),t.lengthComputable){const e=t.type,s=t.loaded,o=t.total,r=`${e}: ${Math.round(s/o*1e4)/100}% [${s}/${o}]`;this.dispatch({type:p.Progress,level:d.Info,message:r})}}startChronoFor(t){this._timers[t]=(new Date).getTime()}stopChronoFor(t){const e=`${t} take ${(new Date).getTime()-this._timers[t]}ms.`;this.dispatch({type:p.Time,level:d.Debug,message:e})}setOutputLevel(t){return this.outputLevel=t,this}setOutput(t){return this.outputs=t,this}}const m=new g;return t.DefaultLogger=m,t.TAbstractObject=
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 */
class{get name(){return this._name}set name(t){const s="Expect a String";if(e.isNull(t))throw new Error(`name cannot be null ! ${s}`);if(e.isUndefined(t))throw new Error(`name cannot be undefined ! ${s}`);if(e.isNotString(t))throw new ReferenceError("TAbstractObject.name: Value cannot be null or undefined. Expect an  !");this._name=t}getName(t){return t.name=this.name,this}setName(t){return this.name=t,this}get uuid(){return this._uuid}set uuid(t){const s="Expect an uuid v4.";if(e.isNull(t))throw new Error(`uuid cannot be null ! ${s}`);if(e.isUndefined(t))throw new Error(`uuid cannot be undefined ! ${s}`);if(!a(t)||4!==function(t){if(!a(t))throw TypeError("Invalid UUID");return parseInt(t.substr(14,1),16)}(t))throw new Error(`Unable to set invalid uuid [${t}] ! ${s}`);this._uuid=t}getUuid(t){return t.uuid=this.uuid,this}setUuid(t){return this.uuid=t,this}constructor(t={}){const e=h(),s={uuid:e,name:`${this.constructor.name}_${e}`,logger:null,...t};this.uuid=s.uuid,this.name=s.name,this.logger=s.logger}},t.TLogger=g,Object.defineProperty(t,"__esModule",{value:!0}),t}({},Itee.Validators,Itee.Utils);
